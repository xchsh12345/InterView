问题:实现一个静态方法,输入参数n,返回计算结果n!（即n的阶乘）,两种方式实现，一种是循环,一种是递归,注意不要数组越界.
思考: 第一点: 1!=1,0!=1
     第二点: 阶乘最终是一个很大的数,在java中,int占有4个字节32位(不同的语言不同的类型可能长度不一样),long占有8个字节64位,因此存在溢出问题.
     第三点: 如果采用递归求n的阶乘,那么可能会造成栈的深度过大,出现StackOverflowError,因此在实际开发中,慎用递归.
     
循环:
  public static int testA(int n){
       if(n==0) {
           return 1;
       }else{
           int b=1;
           while(n>0){
               b=b*n;
               n=n-1;
           }
           return b;
       }
   }
递归:
 public static int testB(int n){
      if(n==0)
          return 1;
      }
      return n*testB(n-1);
  }
利用递归时,如果参数过大就会导致堆栈过深,造成堆栈溢出的问题,当然在堆栈溢出之前我们的第一个拦路虎是int,int的最大值为2147483647(即0x7fffffff),所以当我们传入参数13时就已经出现问题了,这时有人可能会换成其他类型,如long,long占有8个字节64位,对于阶乘来说这恐怕依然不够,所以在这里推荐BigInteger. 不严谨的说BigInteger可以用来表示任意大小的整数,BigInteger是通过int[]来模拟一个大的整数,因此可以说不会有范围的限制,
